https://www.w3schools.com/colors/colors_monochromatic.asp

Colours used for what the app could be

https://lucid.app/lucidchart/50b99521-be84-48da-a854-24e1662ed9a6/edit?invitationId=inv_d5b1c49e-f9fc-4224-b28c-9079ef791624&page=0_0#

Lucid chart, idk if it'll be needed at this stage though

-------------------------------------------------------------------------------------------------------------------------------

Don't forget to check what credentials will be used in the login system, usernames might not be needed for example

User/Customer ID will have to be changed to integer whenever used globally - Only applicable if taking straight from BnB

Check what database you're connected too, most table names will be same so might try looking for column that doesn't exist in a table that does but isn't relevant

Hash passwords wherever you can, templates should account for it but it also can be a pretty explainable issue if you encounter it

Clear whatever comments are on the code pulled from the templates, "Replace with schema name for example"

It's fine to use K1J and Bean n' brew as a "complete" version of occupational specialism but remember they're not up to date, BnB doesn't have paremeters or hashing, K1J was kinda rushed so probably will be missing some things

For SQL tables that won't be edited such as one that might have locations it's ok to use strings for primary keys

This line missing will be what is gonna cause SQL issues in the main window, don't forget it - using MySql.Data.MySqlClient;

-----------------------------------------------------------------------------------------------------------------------------

Paramatise SQL statements wherever you can, example for outputting name into a text box being parsed seen below, integer parsing is also shown here if needed
                                        |
                                        |
                                        |
                                        \/

string userNameFind = "SELECT firstName, lastName FROM customers WHERE customerID = @customerId";
            MySqlCommand cmd = new MySqlCommand(userNameFind, conn);
            cmd.Parameters.AddWithValue("@customerId", int.Parse(customerID));
            MySqlDataReader rdr = cmd.ExecuteReader();
            if (rdr.Read())
            {
                txtBlockWelcome.Text = $"Hello {rdr.GetString(0)} {rdr.GetString(1)}";
            }
            conn.Close();

-----------------------------------------------------------------------------------------------------------------------------

SQL create statement for customers, change "customers" for "user" if suits program better. Columns such as username may be added too, email could be scrapped as well.

CREATE TABLE `customers` (
  `customerID` int NOT NULL AUTO_INCREMENT,
  `firstName` varchar(25) DEFAULT NULL,
  `lastName` varchar(25) DEFAULT NULL,
  `password` varchar(255) DEFAULT NULL,
  `email` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`customerID`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci

-----------------------------------------------------------------------------------------------------------------------------

SQL create statement for orders, not going to fit into many contexts but shows implementation of foreign keys.

CREATE TABLE `orders` (
  `OrderID` int NOT NULL AUTO_INCREMENT,
  `CustomerID` int DEFAULT NULL,
  `OrderDate` date DEFAULT NULL,
  PRIMARY KEY (`OrderID`),
  KEY `CustomerID` (`CustomerID`),
  CONSTRAINT `order_ibfk_1` FOREIGN KEY (`CustomerID`) REFERENCES `customers` (`customerID`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci

-----------------------------------------------------------------------------------------------------------------------------

